dataset = data.frame(key = dataset$V1[2:100001],x1 = dataset$V2[2:100001],x2 = dataset$V3[2:100001])
#generally look into dataset
summary(dataset)
length(which(dataset$x1 == dataset$x2))
length(which(dataset$x1 > dataset$x2))
length(which(dataset$x1 < dataset$x2))
#looks most likely that x1,x2 are random number between 0-100000
# hypothesis 1: use mean of x1,x2 to order dataset is the most effecient R-tree:
for (i in 1:nrow(dataset)) {
dataset$mean[i] = (dataset$x1[i]+dataset$x2[i])/2
}
dataset_mean = dataset[order(dataset$mean), ]
# if there is m branches in parent nodes
#  we put b_max data points in each child node
# for simplity, only consider no underflow case
generate_r_tree = function(m,dataset_table) {
b_min = integer(0.4*m)
b_max = m
dataset_mean_tree = dataset_table
data_layer = 1
while(b_max^data_layer < nrow(dataset_mean_tree)){
col_num  = ncol(dataset_mean_tree) + data_layer
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
data_layer = data_layer + 1
}
col_num  = ncol(dataset_mean_tree) + 1
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer1 = NA)
child_nodes_min = dataset_mean_tree$mean[1]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(1,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
return(dataset_mean_tree)
}
# list of m values that will not cause underflow
m_list = NULL
for(m_val in 1:nrow(dataset)){
b_min_val = as.integer(0.4*m_val)
b_max_val = m_val
if ((nrow(dataset) - as.integer(nrow(dataset)/b_max_val)*b_max_val) >= b_min_val) {
m_list = c(m_list,m_val)
}
}
#choose random five m value from v_list
m_list_s = sample(m_list,5)
#=============================================================
query_list = data.frame(key= 1:10,x1= sample(1:100000,5),x2 =  sample(1:100000,5))
query_result = data.frame(NA)
system.time(
for (i in 1:nrow(query_list)){
for(n in 1:nrow(dataset)){
if(max(query_list$x1[i],query_list$x2[i]) >= max(dataset$x1[n],dataset$x2[n])){
query_result[n,i]= paste(dataset$key[n],dataset$x1[n],dataset$x2[n])
}
}
}
)
View(query_result)
sample(1:100000,5)
1:1
query_list = data.frame(key= 1:1,x1= sample(1:100000,1),x2 =  sample(1:100000,1))
query_result = data.frame(NA)
system.time(
for (i in 1:nrow(query_list)){
for(n in 1:nrow(dataset)){
if(max(query_list$x1[i],query_list$x2[i]) >= max(dataset$x1[n],dataset$x2[n])){
query_result[n,i]= paste(dataset$key[n],dataset$x1[n],dataset$x2[n])
}
}
}
)
print("the query time for" && query_time&& "is" && time_of_query)
ï¼Ÿpaste
?paste
?paste0
?cat
cat("the query time for" , query_time, "is", time_of_query)
query_time = 1
query_list = data.frame(key= 1:query_time,x1= sample(1:100000,query_time),x2 =  sample(1:100000,query_time))
time_of_query = system.time(
for (i in 1:nrow(query_list)){
for(n in 1:nrow(dataset)){
if(max(query_list$x1[i],query_list$x2[i]) >= max(dataset$x1[n],dataset$x2[n])){
query_result[n,i]= paste(dataset$key[n],dataset$x1[n],dataset$x2[n])
}
}
}
)
time_of_query
time_of_query[5]
time_of_query[4]
time_of_query[3]
cat("the query time for" , query_time, "is", time_of_query[3])
cat("the query time for" , query_time, "query/queries is", time_of_query[3],"seconds")
cat("The query time for" , query_time, "query/queries is", time_of_query[3],"seconds")
?table
table(1:5,1:6)
list(1:5,1:6)
branch_number = as.integer(nrow(dataset_mean_tree)/m)
dataset_mean_tree = dataset_table
dataset_table = dataset_mean
dataset_mean_tree = dataset_table
branch_number = as.integer(nrow(dataset_mean_tree)/m)
m=10
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[tail(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number[tail(branch_number)]
branch_number[length(branch_number)]
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
while (branch_number[length(branch_number)] >= m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number
m=10214
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] >= m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
while (branch_number[length(branch_number)] > 1 ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
as.integer(0.000881)
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
which(m_list<10000)
m_list_s = sample(m_list[which(m_list<10000)],5)
m_list_s = sample(m_list[which(m_list<1000)],5)
m_list_s = sample(m_list[which(m_list<10000)],5)
m = 1042
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] >= m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
m= 10
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] >= m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number = c(branch_number,1)
m = 1042
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number = c(branch_number,1)
#choose random five m value(m<1000) from v_list
m_list_s = sample(m_list[which(m_list<1000)],5)
m = 18
branch_number = as.integer(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,as.integer(tail(branch_number))/m)
}
branch_number = c(branch_number,1)
as.integer(5555/18)
ceiling(1.01)
branch_number = celling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,celling(tail(branch_number))/m)
}
branch_number = c(branch_number,1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(tail(branch_number))/m)
}
branch_number = c(branch_number,1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(tail(branch_number))/m)
}
branch_number = c(branch_number,1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
temp1 = ceiling(tail(branch_number))
temp1 = ceiling(tail(branch_number)/m)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
}
branch_number = c(branch_number,1)
dataset_mean_tree = dataset_table
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
}
branch_number = c(branch_number,1)
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
temp1 = ceiling(tail(branch_number)/m)
branch_number = c(branch_number,temp1)
temp1 = ceiling(tail(branch_number)/m)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(length(branch_number)/m))
}
branch_number = c(branch_number,1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)/m])
}
branch_number = c(branch_number,1)
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)/m]))
}
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)]/m))
}
branch_number = c(branch_number,1)
rtree_test = generate_r_tree(18,dataset_mean)
b_min = integer(0.4*m)
b_max = m
data_layer = 1
col_num  = ncol(dataset_mean_tree) + data_layer
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
View(dataset_mean_tree)
data_layer = data_layer + 1
col_num  = ncol(dataset_mean_tree) + data_layer
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
View(dataset_mean_tree)
generate_r_tree = function(m,dataset_table) {
b_min = integer(0.4*m)
b_max = m
dataset_mean_tree = dataset_table
# Create a table display how many branches and sub-braches in the r-tree as a "guide" to query
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)]/m))
}
branch_number = c(branch_number,1)
# Create R-tree
data_layer = 1
while(b_max^data_layer < nrow(dataset_mean_tree)){
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
col_num  = ncol(dataset_mean_tree) + data_layer
data_layer = data_layer + 1
}
col_num  = ncol(dataset_mean_tree) + 1
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer1 = NA)
child_nodes_min = dataset_mean_tree$mean[1]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(1,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
return(dataset_mean_tree,branch_number)
}
rtree_test = generate_r_tree(18,dataset_mean)
rtree_test = generate_r_tree(18,dataset_mean)
b_min = integer(0.4*m)
b_max = m
dataset_mean_tree = dataset_table
data_layer = 1
while(b_max^data_layer < nrow(dataset_mean_tree)){
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
col_num  = ncol(dataset_mean_tree) + data_layer
data_layer = data_layer + 1
}
while(b_max^data_layer < nrow(dataset_mean_tree)){
col_num  = ncol(dataset_mean_tree) + data_layer -1
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
data_layer = data_layer + 1
}
rtree_test = generate_r_tree(18,dataset_mean)
b_min = integer(0.4*m)
b_max = m
dataset_mean_tree = dataset_table
# Create a table display how many branches and sub-braches in the r-tree as a "guide" to query
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)]/m))
}
branch_number = c(branch_number,1)
# Create R-tree
data_layer = 1
while(b_max^data_layer < nrow(dataset_mean_tree)){
col_num  = ncol(dataset_mean_tree) + data_layer -1
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,col_num] = paste(child_nodes_min,child_nodes_max)
}
}
}
data_layer = data_layer + 1
}
b_min = integer(0.4*m)
b_max = m
dataset_mean_tree = dataset_table
# Create a table display how many branches and sub-braches in the r-tree as a "guide" to query
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)]/m))
}
branch_number = c(branch_number,1)
# Create R-tree
data_layer = 1
while(b_max^data_layer < nrow(dataset_mean_tree)){
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,ncol(dataset_mean_tree)] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,ncol(dataset_mean_tree)] = paste(child_nodes_min,child_nodes_max)
}
}
}
data_layer = data_layer + 1
}
rtree_test = generate_r_tree(18,dataset_mean)
generate_branch_index = function(m,dataset_table){
dataset_mean_tree = dataset_table
branch_number = ceiling(nrow(dataset_mean_tree)/m)
while (branch_number[length(branch_number)] > m ){
branch_number = c(branch_number,ceiling(branch_number[length(branch_number)]/m))
}
branch_number = c(branch_number,1)
return(branch_number)
}
# Function create R-tree
generate_r_tree = function(m,dataset_table) {
b_min = integer(0.4*m)
b_max = m
dataset_mean_tree = dataset_table
data_layer = 1
while(b_max^data_layer < nrow(dataset_mean_tree)){
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer = NA)
for(i in c(seq(1,nrow(dataset_mean_tree),b_max^(data_layer)),nrow(dataset_mean_tree))){
if(i+b_max^data_layer-1<= nrow(dataset_mean_tree)){
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[i+b_max^data_layer-1]
for(n in seq(i,i+b_max^data_layer-1,1)){
dataset_mean_tree[n,ncol(dataset_mean_tree)] = paste(child_nodes_min,child_nodes_max)
}
}else{
child_nodes_min = dataset_mean_tree$mean[i]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(i,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,ncol(dataset_mean_tree)] = paste(child_nodes_min,child_nodes_max)
}
}
}
data_layer = data_layer + 1
}
dataset_mean_tree = data.frame(dataset_mean_tree, parent_layer1 = NA)
child_nodes_min = dataset_mean_tree$mean[1]
child_nodes_max = dataset_mean_tree$mean[nrow(dataset_mean_tree)]
for(n in seq(1,nrow(dataset_mean_tree),1)){
dataset_mean_tree[n,ncol(dataset_mean_tree)] = paste(child_nodes_min,child_nodes_max)
}
return(dataset_mean_tree)
}
rtree_test = generate_r_tree(18,dataset_mean)
branch_index_test = generate_branch_index(18,dataset_mean)
View(rtree_test)
i
i= 1
n= 1
rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i),ncol(rtree_test)-i]
rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)]
ncol(rtree_test)
?sep
?separate
paste(rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)],sep = " ")
rb = rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)]
rb = paste(rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)],sep = " ")
rb = strsplit(rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)]," ")
View(rb)
View(rb)
rb[1]
rb[2]
rb[1,1]
as.numeric(rb)
as.character(rb)
rb = strsplit(rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)]," ",fixed = TRUE)
rb
rb = rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)]
rb = strsplit(rtree_test[(nrow(rtree_test)/branch_index_test[length(branch_index_test)-i]),(ncol(rtree_test)-i)]," ")
unlist(rb)
as.character(unlist(rb))
as.numeric(as.character(unlist(rb)))
as.numeric(unlist(rb))
rb = as.numeric(unlist(rb))
